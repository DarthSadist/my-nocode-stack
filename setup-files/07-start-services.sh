#!/bin/bash

echo "=================================================================="
echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (n8n, Flowise, Qdrant, Adminer, –∏ –¥—Ä.)"
echo "=================================================================="

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
if [ -f "$(dirname "$0")/check_disk_space.sh" ]; then
    source "$(dirname "$0")/check_disk_space.sh"
else
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ –ø—Ä—è–º–æ –≤ —Å–∫—Ä–∏–ø—Ç–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    check_disk_space() {
        local required_space=$1 # –≤ MB
        local mount_point=${2:-"/"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ KB
        local free_space=$(df -k "$mount_point" | awk 'NR==2 {print $4}')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ MB –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        local free_space_mb=$((free_space / 1024))
        
        if [ $free_space_mb -lt $required_space ]; then
            echo "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ $mount_point" >&2
            echo "–¢—Ä–µ–±—É–µ—Ç—Å—è: $required_space MB, –î–æ—Å—Ç—É–ø–Ω–æ: $free_space_mb MB" >&2
            return 1
        else
            echo "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ $mount_point: $free_space_mb MB"
            return 0
        fi
    }

    clean_docker_space() {
        echo "‚öôÔ∏è –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        echo "‚Üí –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        sudo docker container prune -f
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤
        echo "‚Üí –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        sudo docker image prune -f
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ–º–æ–≤
        echo "‚Üí –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ–º–æ–≤..."
        sudo docker volume prune -f
        
        echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ Docker:"
        sudo docker system df
    }
fi 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Docker-–æ–±—Ä–∞–∑–∞
check_docker_image() {
    local image=$1
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞: $image"
    if ! sudo docker pull $image &>/dev/null; then
        echo "‚ùå –û–®–ò–ë–ö–ê: –û–±—Ä–∞–∑ Docker '$image' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" >&2
        return 1
    else
        echo "‚úÖ –û–±—Ä–∞–∑ '$image' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
show_container_logs() {
    local container=$1
    local lines=${2:-10}
    echo -e "\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container:"
    sudo docker logs $container --tail $lines 2>/dev/null || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnostic_info() {
    echo -e "\n==== üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ====" 
    echo -e "\n1. –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    sudo docker ps
    
    echo -e "\n2. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ):"
    sudo docker ps -a
    
    echo -e "\n3. –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã Docker:"
    sudo docker network ls
    
    echo -e "\n4. –¢–æ–º qdrant_storage:"
    sudo docker volume inspect qdrant_storage 2>/dev/null || echo "–¢–æ–º qdrant_storage –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    echo -e "\n5. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ:"
    grep -E "QDRANT_API_KEY|CRAWL4AI_JWT_SECRET" $ENV_FILE 2>/dev/null || echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $ENV_FILE"
    
    echo -e "\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤ Docker:"
    check_docker_image "n8nio/n8n:latest"
    check_docker_image "flowiseai/flowise:latest"
    check_docker_image "qdrant/qdrant:latest"
    check_docker_image "node:18-alpine" # –¥–ª—è crawl4ai
    check_docker_image "containrrr/watchtower:latest"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Caddyfile
check_and_fix_caddyfile() {
    local caddyfile="/opt/Caddyfile"
    echo -e "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Caddyfile –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫..."
    
    if [ ! -f "$caddyfile" ]; then
        echo "‚ùå –û–®–ò–ë–ö–ê: Caddyfile –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $caddyfile" >&2
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π email –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if grep -q "email\s*$" "$caddyfile" || grep -q "email\s*{" "$caddyfile" || grep -q "email\s*\${USER_EMAIL:-" "$caddyfile"; then
        echo "‚ùå –û–®–ò–ë–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–æ–π 'email' –≤ Caddyfile" >&2
        echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:" >&2
        grep -n "email" "$caddyfile" >&2
        
        echo "‚öôÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Caddyfile..."
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        sudo cp "$caddyfile" "${caddyfile}.backup"
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã email
        if grep -q "USER_EMAIL" "/opt/.env" 2>/dev/null; then
            USER_EMAIL=$(grep "USER_EMAIL" "/opt/.env" | cut -d'=' -f2)
            echo "‚úÖ –ù–∞–π–¥–µ–Ω email –≤ .env —Ñ–∞–π–ª–µ: $USER_EMAIL"
            sudo sed -i "s/email\s*$/email $USER_EMAIL/" "$caddyfile"
            sudo sed -i "s/email\s*{/email $USER_EMAIL {/" "$caddyfile"
            sudo sed -i "s/email\s*\${USER_EMAIL:-[^}]*}/email $USER_EMAIL/" "$caddyfile"
        else
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ USER_EMAIL –≤ .env —Ñ–∞–π–ª–µ" >&2
            echo "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Caddyfile:"
            read -p "Email: " USER_EMAIL
            if [ -z "$USER_EMAIL" ]; then
                echo "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω email. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é admin@example.com" >&2
                USER_EMAIL="admin@example.com"
            fi
            sudo sed -i "s/email\s*$/email $USER_EMAIL/" "$caddyfile"
            sudo sed -i "s/email\s*{/email $USER_EMAIL {/" "$caddyfile"
            sudo sed -i "s/email\s*\${USER_EMAIL:-[^}]*}/email $USER_EMAIL/" "$caddyfile"
        fi
        
        echo "‚úÖ Caddyfile –∏—Å–ø—Ä–∞–≤–ª–µ–Ω. –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤ ${caddyfile}.backup"
    else
        echo "‚úÖ –î–∏—Ä–µ–∫—Ç–∏–≤–∞ 'email' –≤ Caddyfile –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Caddyfile
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Caddyfile..."
    if ! sudo docker run --rm -v "$caddyfile:/etc/caddy/Caddyfile:ro" caddy:2 caddy validate --config /etc/caddy/Caddyfile &>/dev/null; then
        echo "‚ùå –û–®–ò–ë–ö–ê: Caddyfile —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:" >&2
        sudo docker run --rm -v "$caddyfile:/etc/caddy/Caddyfile:ro" caddy:2 caddy validate --config /etc/caddy/Caddyfile
        echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ $caddyfile –≤—Ä—É—á–Ω—É—é" >&2
        return 1
    else
        echo "‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å Caddyfile –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! sudo docker info > /dev/null 2>&1; then
    echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω" >&2
    exit 1
fi

# Define compose file paths
N8N_COMPOSE_FILE="/opt/n8n-docker-compose.yaml"
FLOWISE_COMPOSE_FILE="/opt/flowise-docker-compose.yaml"
QDRANT_COMPOSE_FILE="/opt/qdrant-docker-compose.yaml"
CRAWL4AI_COMPOSE_FILE="/opt/crawl4ai-docker-compose.yaml"
WATCHTOWER_COMPOSE_FILE="/opt/watchtower-docker-compose.yaml"
NETDATA_COMPOSE_FILE="/opt/netdata-docker-compose.yaml"
WAHA_COMPOSE_FILE="/opt/waha-docker-compose.yaml"
ENV_FILE="/opt/.env" # Assuming .env is copied to /opt

# Check if compose files exist
if [ ! -f "$N8N_COMPOSE_FILE" ]; then
    echo "Error: $N8N_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$FLOWISE_COMPOSE_FILE" ]; then
    echo "Error: $FLOWISE_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$QDRANT_COMPOSE_FILE" ]; then
    echo "Error: $QDRANT_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$CRAWL4AI_COMPOSE_FILE" ]; then
    echo "Error: $CRAWL4AI_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$WATCHTOWER_COMPOSE_FILE" ]; then
    echo "Error: $WATCHTOWER_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$NETDATA_COMPOSE_FILE" ]; then
    echo "Error: $NETDATA_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$WAHA_COMPOSE_FILE" ]; then
    echo "Error: $WAHA_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$ENV_FILE" ]; then
    echo "Error: $ENV_FILE not found." >&2
    exit 1
fi

echo "========================================================="
echo "  ‚öôÔ∏è –°—Ç–∞—Ä—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: n8n, Flowise, Qdrant, Adminer, Crawl4AI, Watchtower, Netdata, Caddy, PostgreSQL, Redis"
echo "=========================================================" 

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
start_service() {
  local compose_file=$1
  local service_name=$2
  local env_file=$3
  local max_retries=2
  local retry_count=0

  echo -e "\n======================"
  echo "‚ö° –ó–∞–ø—É—Å–∫ $service_name..."
  echo -e "======================\n"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Docker Compose —Ñ–∞–π–ª–∞
  check_compose_file "$compose_file"
  if [ $? -ne 0 ]; then
    echo -e "\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $compose_file —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å YAML."
    return 1
  fi
  
  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
  local start_cmd="sudo docker compose -f $compose_file"
  if [ -n "$env_file" ]; then
    start_cmd="$start_cmd --env-file $env_file"
  fi
  # –î–æ–±–∞–≤–ª—è–µ–º project-name –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä remove-orphans
  start_cmd="$start_cmd -p nocode-stack up -d --remove-orphans"
  
  # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  while [ $retry_count -lt $max_retries ]; do
    echo "–ó–∞–ø—É—Å–∫ $service_name (–ø–æ–ø—ã—Ç–∫–∞ $((retry_count+1))/$max_retries)..."
    eval $start_cmd
    
    if [ $? -eq 0 ]; then
      local verify_cmd="sudo docker ps | grep -q \"$service_name\""
      sleep 3  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ–ª —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫
      if eval $verify_cmd; then
        echo "‚úÖ $service_name —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        return 0
      else
        echo "‚ö†Ô∏è $service_name –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
      fi
    fi

    retry_count=$((retry_count+1))
    if [ $retry_count -lt $max_retries ]; then
      echo "‚ö†Ô∏è –°–±–æ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ $service_name, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
      sleep 5
    else
      echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å $service_name –ø–æ—Å–ª–µ $max_retries –ø–æ–ø—ã—Ç–æ–∫!"
      return 1
    fi
  done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Docker Compose —Ñ–∞–π–ª–∞
check_compose_file() {
  local compose_file=$1
  echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ $compose_file..."
  if sudo docker compose -f "$compose_file" config > /dev/null 2>&1; then
    echo "‚úÖ $compose_file –≤–∞–ª–∏–¥–µ–Ω"
    return 0
  else
    echo "‚ùå –û–®–ò–ë–ö–ê: $compose_file —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏"
    return 1
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏ Docker
ensure_docker_network() {
  local network_name=$1
  if ! sudo docker network inspect "$network_name" &> /dev/null; then
    echo -e "\n‚ùó –°–µ—Ç—å $network_name –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º..."
    sudo docker network create "$network_name"
    if [ $? -eq 0 ]; then
      echo "‚úÖ –°–µ—Ç—å $network_name —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
      return 0
    else
      echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ç–∏ $network_name"
      return 1
    fi
  else
    echo "‚úÖ –°–µ—Ç—å $network_name —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    return 0
  fi
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
successful_services=0
failed_services=0
total_services=8  # n8n, flowise, qdrant, crawl4ai, watchtower, netdata, adminer, waha

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ app-network –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
ensure_docker_network "app-network"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Caddyfile –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Caddy –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º..."
check_and_fix_caddyfile
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Caddy. –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É, –Ω–æ —Å–µ—Ä–≤–∏—Å Caddy –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ." >&2
  read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏? (y/n): " CONTINUE
  if [[ ! $CONTINUE =~ ^[Yy]$ ]]; then
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º." >&2
    exit 1
  fi
fi

# –ó–∞–ø—É—Å–∫ n8n —Å—Ç–µ–∫–∞ (–≤–∫–ª—é—á–∞–µ—Ç Caddy, Postgres, Redis, Adminer)
start_service "$N8N_COMPOSE_FILE" "n8n" "$ENV_FILE"
if [ $? -eq 0 ]; then
  ((successful_services++))
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ Docker
  echo "\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ Docker..."
  sleep 5
  if ! sudo docker network inspect app-network &> /dev/null; then
    echo "‚ùå –û—à–∏–±–∫–∞: –°–µ—Ç—å app-network –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    exit 1
  else
    echo "‚úÖ –°–µ—Ç—å app-network —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
  fi
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å n8n —Å—Ç–µ–∫"
  exit 1
fi

# –ó–∞–ø—É—Å–∫ Flowise —Å—Ç–µ–∫–∞
start_service "$FLOWISE_COMPOSE_FILE" "flowise" "$ENV_FILE"
if [ $? -eq 0 ]; then
  ((successful_services++))
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Flowise —Å—Ç–µ–∫"
  exit 1
fi



# –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞

# –ó–∞–ø—É—Å–∫ Qdrant
start_service "$QDRANT_COMPOSE_FILE" "qdrant" "$ENV_FILE"
if [ $? -eq 0 ]; then
  ((successful_services++))
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Qdrant —Å—Ç–µ–∫"
  exit 1
fi

# –ó–∞–ø—É—Å–∫ Crawl4AI
start_service "$CRAWL4AI_COMPOSE_FILE" "crawl4ai" "$ENV_FILE"
if [ $? -eq 0 ]; then
  ((successful_services++))
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Crawl4AI —Å—Ç–µ–∫"
  exit 1
fi

# –ó–∞–ø—É—Å–∫ Watchtower
start_service "$WATCHTOWER_COMPOSE_FILE" "watchtower" ""
if [ $? -eq 0 ]; then
  ((successful_services++))
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Watchtower —Å—Ç–µ–∫"
  exit 1
fi

# –ó–∞–ø—É—Å–∫ Netdata (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
echo -e "\n======================\n‚öôÔ∏è –ó–∞–ø—É—Å–∫ Netdata...\n======================\n"

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Netdata
SKIP_NETDATA_INSTALL=false

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π Netdata
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π Netdata..."
# Netdata —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 500MB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
if ! check_disk_space 500; then
  echo "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Netdata" >&2
  echo "–ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..." >&2
  clean_docker_space
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
  if ! check_disk_space 500; then
    echo "‚ö†Ô∏è –î–∞–∂–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è Netdata" >&2
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Netdata –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Netdata? (y/n): " SKIP_NETDATA
    if [[ "$SKIP_NETDATA" =~ ^[Yy]$ ]]; then
      echo "‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Netdata –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      ((total_services--))
      SKIP_NETDATA_INSTALL=true
    fi
  fi
fi

# –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π Netdata, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
if [ "$SKIP_NETDATA_INSTALL" = false ]; then
  start_service "$NETDATA_COMPOSE_FILE" "netdata" "$ENV_FILE"
  if [ $? -eq 0 ]; then
    ((successful_services++))
  else
    ((failed_services++))
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Netdata —Å—Ç–µ–∫. Netdata –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..." >&2
    ((total_services--))
  fi
else
  echo "‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Netdata –ø—Ä–æ–ø—É—â–µ–Ω–∞"
fi

# –ó–∞–ø—É—Å–∫ Adminer (–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ n8n-docker-compose)
echo "\n======================="
echo "‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞/–∑–∞–ø—É—Å–∫ Adminer..."
echo "=======================\n"

if ! sudo docker ps | grep -q "adminer"; then
  echo "Adminer –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –∏–∑ n8n-docker-compose.yaml..."
  sudo docker compose -f "$N8N_COMPOSE_FILE" --env-file "$ENV_FILE" up -d adminer
  sleep 3
  if sudo docker ps | grep -q "adminer"; then
    echo "‚úÖ Adminer —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    ((successful_services++))
  else
    echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Adminer –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
    ((failed_services++))
  fi
else
  echo "‚úÖ Adminer —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
  ((successful_services++))
fi

# –ó–∞–ø—É—Å–∫ WordPress
echo "\n======================="
echo "‚ö° –ó–∞–ø—É—Å–∫ WordPress..."
echo "=======================\n"

WP_COMPOSE_FILE="/opt/wordpress-docker-compose.yaml"
if [ -f "$WP_COMPOSE_FILE" ]; then
  start_service "$WP_COMPOSE_FILE" "wordpress" "$ENV_FILE"
  if [ $? -eq 0 ]; then
    ((successful_services++))
    ((total_services++))
  else
    ((failed_services++))
    ((total_services++))
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å WordPress —Å—Ç–µ–∫, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..." >&2
  fi
else
  echo "‚ö†Ô∏è –§–∞–π–ª $WP_COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ WordPress." >&2
fi

# –ó–∞–ø—É—Å–∫ Waha
echo "\n=======================" 
echo "‚ö° –ó–∞–ø—É—Å–∫ Waha..."
echo "=======================\n"

if [ -f "$WAHA_COMPOSE_FILE" ]; then
  start_service "$WAHA_COMPOSE_FILE" "waha" "$ENV_FILE"
  if [ $? -eq 0 ]; then
    ((successful_services++))
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ total_services, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    ((total_services++))
  else
    ((failed_services++))
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ total_services –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å
    ((total_services++))
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å Waha, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..." >&2
  fi
else
  echo "‚ö†Ô∏è –§–∞–π–ª $WAHA_COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ Waha." >&2
  ((failed_services++))
fi

# –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "\n\n===========================================" 
echo "üïí –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
echo "==========================================\n"
sleep 8

# –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "\n\n=========================================="
echo "üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–ï–†–í–ò–°–û–í"
echo "==========================================\n"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service() {
  local service=$1
  if sudo docker ps | grep -q "$service"; then
    echo "‚úÖ $service - –ó–ê–ü–£–©–ï–ù"
    return 0
  else
    echo "‚ùå $service - –ù–ï –ó–ê–ü–£–©–ï–ù"
    return 1
  fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
check_service "n8n"
check_service "caddy"
check_service "flowise"
check_service "qdrant"
check_service "crawl4ai" 
check_service "watchtower"
check_service "netdata"
check_service "adminer" # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
check_service "waha" # WhatsApp HTTP API

# –ü—Ä–æ–≤–µ—Ä–∫–∞ WordPress –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
if sudo docker ps | grep -q "wordpress"; then
  check_service "wordpress"
  check_service "wordpress_db"
  # –£–≤–µ–ª–∏—á–∏–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Ä–≤–∏—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É—á—Ç–µ–Ω—ã —Ä–∞–Ω–µ–µ
  ((total_services++))
  ((total_services++))
  
  # –°—á–∏—Ç–∞–µ–º WordPress —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
  if sudo docker ps | grep -q "wordpress"; then
    ((successful_services++))
  else
    ((failed_services++))
  fi
  
  # –°—á–∏—Ç–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö WordPress —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞
  if sudo docker ps | grep -q "wordpress_db"; then
    ((successful_services++))
  else
    ((failed_services++))
  fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ Caddy —Å–ª—É—à–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã
echo "\n- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ Caddy:"
if ! sudo ss -tulnp | grep -q 'docker-proxy.*:80' || ! sudo ss -tulnp | grep -q 'docker-proxy.*:443'; then
    echo "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: Caddy (–æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏) –Ω–µ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç—ã 80 –∏–ª–∏ 443"
else
    echo "‚úÖ Caddy —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç—ã 80 –∏ 443"
fi

# –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
echo "\n========================================================="
echo "üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ü–£–°–ö–ê:"
echo "   ‚úì –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: $successful_services –∏–∑ $total_services —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "   ‚úó –ù–µ –∑–∞–ø—É—â–µ–Ω–æ: $failed_services —Å–µ—Ä–≤–∏—Å–æ–≤"
if [ $failed_services -eq 0 ]; then
  echo "\n‚úÖ –í–°–ï –°–ï–†–í–ò–°–´ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–´!"
  echo "========================================================="
  echo "–°–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã! –°–∫–æ—Ä–æ –æ–Ω–∏ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
else
  echo "\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."
  echo "========================================================="
  echo "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
fi

exit 0